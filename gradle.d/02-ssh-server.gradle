ssh.settings {
    // use known_hosts file for production servers
    // knownHosts = file('gradle.d/known_hosts')
    knownHosts = allowAnyHosts
}

remotes {
    swarmManager01 {
        role 'swarm-manager-primary'

        host = '192.168.33.10'
        user = 'vagrant'
        identity = file('.vagrant/machines/swarmManager01/virtualbox/private_key')
    }

    swarmManager02 {
        role 'swarm-manager'

        host = '192.168.33.11'
        user = 'vagrant'
        identity = file('.vagrant/machines/swarmManager02/virtualbox/private_key')
    }

    serviceDiscovery01 {
        role 'service-discovery-primary'

        host = '192.168.33.20'
        user = 'vagrant'
        identity = file('.vagrant/machines/serviceDiscovery01/virtualbox/private_key')
    }

    swarmAgent01 {
        role 'swarm-agent'

        host = '192.168.33.30'
        user = 'vagrant'
        identity = file('.vagrant/machines/swarmAgent01/virtualbox/private_key')
    }

    swarmAgent02 {
        role 'swarm-agent'

        host = '192.168.33.31'
        user = 'vagrant'
        identity = file('.vagrant/machines/swarmAgent02/virtualbox/private_key')
    }
}


task hello << {
    ssh.run {
        session(remotes) {
            execute "cat /etc/centos-release"
        }
    }
}

task dockerInstall << {
    ssh.run {
        session(remotes) {
            execute "curl -sSL https://get.docker.com/ | sh"
            execute "sudo service docker start"
        }
    }
}

task dockerCheck << {
    ssh.run {
        session(remotes) {
            execute "sudo docker --version"
        }
    }
}

task consulSetup << {
    ssh.run {
        session(remotes.role('service-discovery-primary')) {
            execute "sudo docker run -d -p 8500:8500 --name=consul progrium/consul -server -bootstrap"
            execute "sudo docker ps -a"
        }
    }
}

task swarmManagerPrimarySetup << {
    ssh.run {
        session(remotes.role('swarm-manager-primary')) {
            execute "sudo docker run -d -p 4000:4000 swarm manage -H :4000 --replication --advertise ${remotes.swarmManager01.host}:4000 consul://${remotes.serviceDiscovery01.host}:8500"
            execute "sudo docker ps -a"
        }
    }
}

task swarmManagerReplicaSetup << {
    ssh.run {
        session(remotes.role('swarm-manager')) {
            execute "sudo docker run -d -p 4000:4000 swarm manage -H :4000 --replication --advertise ${delegate.getRemote().host}:4000 consul://${remotes.serviceDiscovery01.host}:8500"
            execute "sudo docker ps -a"
        }
    }
}

task swarmAgentsSetup << {
    ssh.run {
        session(remotes.role('swarm-agent')) {
            execute "sudo docker run -d swarm join --advertise=${delegate.getRemote().host}:2375 consul://${remotes.serviceDiscovery01.host}:8500"
            execute "sudo docker ps -a"
        }
    }
}

task swarmSetup {
    mustRunAfter consulSetup

    dependsOn swarmManagerPrimarySetup
    dependsOn swarmManagerReplicaSetup
    dependsOn swarmAgentsSetup
}
